@namespace ProfilePostList
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using PicoForum.Data
@using PicoForum.Models

@inject IConfiguration Configuration
@inject ApplicationDbContext DB
@inject UserManager<ApplicationUser> usermanager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContext
@inject AuthenticationStateProvider _authenticationStateProvider


<div class="m-2">
    <h4>User's Posts</h4>
</div>
<div class="list-group flex-grow-1">
    @for (int i = 0; i < posts.Count; i++)
    {
        <div class="list-group-item">
            <a href="/post/@posts[i].PFPostId" class="text-black" style="text-decoration: none;">
                <div class="d-flex justify-content-between align-items-center">
                    <div>@posts[i].Title</div>
                    <div>
                        <span class="mx-2"></span>
                        <span>Publish Time @posts[i].TimePublish</span>
                    </div>
                </div>
            </a>
        </div>
    }
    @if (posts.Count == 0)
    {
        <div>There is No Post.</div>
    }
</div>
<div class="my-3 d-flex align-items-center justify-content-end">
    <div>
        <button class="btn btn-info" @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>
        <span>Page <input @bind="inputPage" style="width: 50px; text-align:right" /> of @TotalPages</span>
        <button class="btn btn-info" @onclick="NextPage" disabled="@IsLastPage">Next</button>
        <button class="btn btn-info" @onclick="GoToPage">Go</button>
    </div>
</div>

@code {
    [Parameter]
    public ApplicationUser User { get; set; }

    public List<PFPost> posts { get; set; }

    //need move to config
    int pageSize = 10;

    int pageNumber = 1;
    int inputPage = 1;

    bool IsFirstPage => pageNumber == 1;
    bool IsLastPage => GetPageData().Count < pageSize;
    int TotalPages => (int)Math.Ceiling(DB.Posts.Where(x => x.UserId == User.Id).Count() / (double)pageSize);

    public async Task<string> GetUsername(string userid)
    {
        var user = await usermanager.FindByIdAsync(userid);
        return user.Friendlyname;
    }

    protected override async Task OnInitializedAsync()
    {
        pageNumber = 1;

        posts = GetPageData();
    }

    List<PFPost> GetPageData()
    {
        var skipAmount = pageSize * (pageNumber - 1);
        return DB.Posts.Where(x => x.UserId == User.Id)
                        .OrderByDescending(x => x.TimeUpdate)
                        .Skip(skipAmount).Take(pageSize).ToList();
    }

    async void NextPage()
    {
        if (!IsLastPage)
        {
            pageNumber++;
            inputPage = pageNumber;
            posts = GetPageData();
            await InvokeAsync(StateHasChanged);
        }
    }

    async void PreviousPage()
    {
        if (!IsFirstPage)
        {
            pageNumber--;
            inputPage = pageNumber;
            posts = GetPageData();
            await InvokeAsync(StateHasChanged);
        }
    }

    async void GoToPage()
    {
        // Validate the entered page number
        if (inputPage < 1)
        {
            pageNumber = 1;
            inputPage = 1;
            posts = GetPageData();
            await InvokeAsync(StateHasChanged);
        }
        else if (inputPage >= 1 && inputPage <= TotalPages)
        {
            pageNumber = inputPage;
            posts = GetPageData();
            await InvokeAsync(StateHasChanged);
        }
        else if (inputPage > TotalPages)
        {
            pageNumber = 1;
            inputPage = 1;
            posts = GetPageData();
            await InvokeAsync(StateHasChanged);
        }
    }
}
